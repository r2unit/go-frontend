name: Build Frontend Container

on:
  push:
    branches: [ '*' ]  # Run on all branches in the framework repository
  workflow_dispatch:

jobs:
  check-repo-name:
    runs-on: ubuntu-latest
    outputs:
      is-frontend: ${{ steps.check-name.outputs.is-frontend }}
    steps:
      - name: Check repository name
        id: check-name
        run: |
          if [[ "${{ github.repository }}" =~ ^.*\/frontend-.*$ ]]; then
            echo "is-frontend=true" >> $GITHUB_OUTPUT
          else
            echo "is-frontend=false" >> $GITHUB_OUTPUT
          fi

  check-branches:
    needs: check-repo-name
    if: needs.check-repo-name.outputs.is-frontend == 'true'
    runs-on: ubuntu-latest
    outputs:
      has-master: ${{ steps.check-master.outputs.has-branch }}
      has-develop: ${{ steps.check-develop.outputs.has-branch }}
    steps:
      - name: Check if master branch exists
        id: check-master
        run: |
          # Check if master branch exists in the repository
          if git ls-remote --heads https://github.com/${{ github.repository }}.git master | grep master; then
            echo "has-branch=true" >> $GITHUB_OUTPUT
          else
            echo "has-branch=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Check if develop branch exists
        id: check-develop
        run: |
          # Check if develop branch exists in the repository
          if git ls-remote --heads https://github.com/${{ github.repository }}.git develop | grep develop; then
            echo "has-branch=true" >> $GITHUB_OUTPUT
          else
            echo "has-branch=false" >> $GITHUB_OUTPUT
          fi

  build-master:
    needs: [check-repo-name, check-branches]
    if: needs.check-repo-name.outputs.is-frontend == 'true' && needs.check-branches.outputs.has-master == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout template repository (master)
        uses: actions/checkout@v3
        with:
          path: template-repo
          ref: master

      - name: Checkout framework repository
        uses: actions/checkout@v3
        with:
          repository: nerdpitch-cloud/frontend-framework
          path: framework-repo
          # Explicitly specify the ref to avoid default branch lookup
          ref: main
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Prepare build directory
        run: |
          # Create build directory
          mkdir -p build
          
          # Copy framework code
          cp -r framework-repo/pkg build/
          cp framework-repo/main.go build/
          cp framework-repo/go.mod build/
          cp framework-repo/go.sum build/
          
          # Copy template files
          mkdir -p build/templates build/pages build/assets build/config
          cp -r template-repo/templates/* build/templates/ || true
          cp -r template-repo/pages/* build/pages/ || true
          cp -r template-repo/assets/* build/assets/ || true
          cp template-repo/config/routes.json build/config/ || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repository name
        id: repo-name
        run: |
          # Extract repository name without organization
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "repo-name=$REPO_NAME" >> $GITHUB_OUTPUT
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ steps.repo-name.outputs.repo-name }}
          tags: |
            # Use semver format if semver tags exist
            type=semver,pattern={{version}}
            
            # Fallback tags if no semver tags exist
            type=ref,event=branch,suffix=-{{sha}},enable=${{ github.ref == 'refs/heads/master' }}
            
            # Add latest tag for master branch
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=${{ steps.repo-name.outputs.repo-name }}
            org.opencontainers.image.description=Frontend application built with frontend-framework
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.authors=r2unit@proton.me
            org.opencontainers.image.vendor=Nerdpitch Cloud

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: build
          file: framework-repo/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-develop:
    needs: [check-repo-name, check-branches]
    if: needs.check-repo-name.outputs.is-frontend == 'true' && needs.check-branches.outputs.has-develop == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout template repository (develop)
        uses: actions/checkout@v3
        with:
          path: template-repo
          ref: develop

      - name: Checkout framework repository
        uses: actions/checkout@v3
        with:
          repository: nerdpitch-cloud/frontend-framework
          path: framework-repo
          # Explicitly specify the ref to avoid default branch lookup
          ref: main
          
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Prepare build directory
        run: |
          # Create build directory
          mkdir -p build
          
          # Copy framework code
          cp -r framework-repo/pkg build/
          cp framework-repo/main.go build/
          cp framework-repo/go.mod build/
          cp framework-repo/go.sum build/
          
          # Copy template files
          mkdir -p build/templates build/pages build/assets build/config
          cp -r template-repo/templates/* build/templates/ || true
          cp -r template-repo/pages/* build/pages/ || true
          cp -r template-repo/assets/* build/assets/ || true
          cp template-repo/config/routes.json build/config/ || true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract repository name
        id: repo-name
        run: |
          # Extract repository name without organization
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d '/' -f 2)
          echo "repo-name=$REPO_NAME" >> $GITHUB_OUTPUT
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ steps.repo-name.outputs.repo-name }}
          tags: |
            # For develop branch, use develop-[semver] format if semver tags exist
            type=semver,pattern=develop-{{version}}
            
            # Fallback tags if no semver tags exist
            type=ref,event=branch,prefix=develop-,suffix=-{{sha}}
          labels: |
            org.opencontainers.image.title=${{ steps.repo-name.outputs.repo-name }}
            org.opencontainers.image.description=Frontend application built with frontend-framework
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.authors=r2unit@proton.me
            org.opencontainers.image.vendor=Nerdpitch Cloud

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: build
          file: framework-repo/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}